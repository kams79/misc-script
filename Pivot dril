Option Explicit

' Entry point for UiPath Invoke VBA
' Params:
'   pivotSheetName   = sheet that contains the PivotTable (e.g., "Pivot")
'   pivotName        = PivotTable.Name (e.g., "PivotTable1")
'   targetCellAddr   = (optional) cell address like "G25". If provided, we drill this cell directly.
'                      If empty, we will auto-find a Grand Total cell based on "whichGrand".
'   valuesFieldName  = (optional) the DataField (Values field) to match, e.g., "Sum of Amount".
'                      Leave "" to accept the first matching grand total.
'   whichGrand       = "row" | "column" | "first"
'                      row    -> looks in the last column of the pivot data area
'                      column -> looks in the last row of the pivot data area
'                      first  -> first grand total it finds anywhere in the table
'   outputSheetName  = sheet name to assign to the generated detail sheet (Excel appends (2), (3) if needed)
Public Sub DrillPivot( _
    ByVal pivotSheetName As String, _
    ByVal pivotName As String, _
    ByVal targetCellAddr As String, _
    ByVal valuesFieldName As String, _
    ByVal whichGrand As String, _
    ByVal outputSheetName As String)

    Dim ws As Worksheet, pt As PivotTable
    Set ws = ThisWorkbook.Worksheets(pivotSheetName)
    Set pt = ws.PivotTables(pivotName)
    pt.EnableDrilldown = True

    Dim tgt As Range
    If Len(Trim$(targetCellAddr)) > 0 Then
        ' Mode 1: direct cell address
        Set tgt = ws.Range(targetCellAddr)
    Else
        ' Mode 2/3: find a Grand Total cell
        Set tgt = FindGrandTotalCell(pt, valuesFieldName, whichGrand)
        If tgt Is Nothing Then Err.Raise vbObjectError + 513, , "Grand Total cell not found. Check grand totals visibility / field name."
    End If

    ' Trigger Excel drill-through (same as double-click)
    tgt.ShowDetail = True

    ' Rename created sheet
    On Error Resume Next
    ActiveSheet.Name = outputSheetName
    Err.Clear
    On Error GoTo 0
End Sub


' Find a Grand Total cell inside a PivotTable based on preferred location and optional DataField name.
' whichGrand = "row" | "column" | "first"
Private Function FindGrandTotalCell(ByVal pt As PivotTable, ByVal valuesFieldName As String, ByVal whichGrand As String) As Range
    Const xlPivotCellGrandTotal As Long = 22

    Dim dataArea As Range, tableArea As Range
    Set tableArea = pt.TableRange2
    On Error Resume Next
    Set dataArea = pt.DataBodyRange    ' can be Nothing for some layouts
    On Error GoTo 0

    Dim lastRow As Long, lastCol As Long
    If Not dataArea Is Nothing Then
        lastRow = dataArea.Rows(dataArea.Rows.Count).Row
        lastCol = dataArea.Columns(dataArea.Columns.Count).Column
    Else
        lastRow = -1
        lastCol = -1
    End If

    Dim c As Range
    Dim firstHit As Range

    For Each c In tableArea.Cells
        On Error Resume Next
        If Not c.PivotCell Is Nothing Then
            If c.PivotCell.PivotCellType = xlPivotCellGrandTotal Then
                ' Optional: match a particular Values field
                If Len(Trim$(valuesFieldName)) > 0 Then
                    If Not c.PivotCell.DataField Is Nothing Then
                        If StrComp(c.PivotCell.DataField.SourceName, valuesFieldName, vbTextCompare) <> 0 _
                           And StrComp(c.PivotCell.DataField.Name, valuesFieldName, vbTextCompare) <> 0 Then
                            GoTo NextCell
                        End If
                    Else
                        GoTo NextCell
                    End If
                End If

                ' Keep first match if needed
                If firstHit Is Nothing Then Set firstHit = c

                ' If caller specified row/column, try to pinpoint by position in data area
                Select Case LCase$(whichGrand)
                    Case "row"
                        If lastCol > 0 Then
                            If c.Column = lastCol Then Set FindGrandTotalCell = c: Exit Function
                        End If
                    Case "column"
                        If lastRow > 0 Then
                            If c.Row = lastRow Then Set FindGrandTotalCell = c: Exit Function
                        End If
                    Case "first"
                        Set FindGrandTotalCell = c
                        Exit Function
                End Select
            End If
        End If
NextCell:
        On Error GoTo 0
    Next c

    ' Fallbacks
    If Not firstHit Is Nothing Then
        Set FindGrandTotalCell = firstHit
    Else
        Set FindGrandTotalCell = Nothing
    End If
End Function
